package approve

import (
	"context"
	"mime/multipart"

	"github.com/JIeeiroSst/workflow-service/dto"
	"github.com/JIeeiroSst/workflow-service/internal/activities/approve/facade"
	"github.com/JIeeiroSst/workflow-service/pkg/excel"
)

type ProcessState struct {
	Facade      facade.Facade
	GoogleSheet excel.GoogleSheet
	FileHeader  *multipart.FileHeader
}

type Upload struct {
	Type          string
	File          string
	ActiveUser    ActiveUser
	SpreadsheetId string
	Sheet         string
	FilterStruct  interface{}
}

type Process struct {
	Type       string
	Email      string
	IsApprove  bool
	ActiveUser ActiveUser
}

type Approve struct {
	Type       string
	Email      string
	IsApprove  bool
	ActiveUser ActiveUser
}

func (p *ProcessState) UploadApprove(upload Upload) {
	switch upload.Type {
	case "local":
		sheetFile, _ := excel.ReadFileExcel(p.FileHeader)
		sheets := sheetFile.Sheet
		sheet := sheets["Sheet"]
		switch upload.FilterStruct.(type) {
		case dto.BestSellingPlayStationRequestDTO:
			autoGenerateds := excel.GetRowValues(sheet)
			sellingPlayStation := dto.FormatLocalSellingPlayStation(autoGenerateds)
			p.Facade.SellingPlayStation.InsertSellingPlayStation(sellingPlayStation)
		case dto.GameRequestDTO:
			autoGenerateds := excel.GetRowValues(sheet)
			games := dto.FormatLocalGame(autoGenerateds)
			p.Facade.Game.InsertGame(games)
		case dto.SeattleWeatherRequestDTO:
			autoGenerateds := excel.GetRowValues(sheet)
			seattleWeather := dto.FormatLocalSeattleWeather(autoGenerateds)
			p.Facade.SeattleWeather.InsertSeattleWeather(seattleWeather)
		case dto.SpotifyQuarterlyRequestDTO:
			autoGenerateds := excel.GetRowValues(sheet)
			spotifyQuarterly := dto.FormatLocalSpotifyQuarterly(autoGenerateds)
			p.Facade.SpotifyQuarterly.InsertSpotifyQuarterly(spotifyQuarterly)
		}
	case "google_sheet":
		switch upload.FilterStruct.(type) {
		case dto.BestSellingPlayStationRequestDTO:
			autoGenerateds, err := p.GoogleSheet.SheetGoogleApi(upload.SpreadsheetId, upload.Sheet)
			if err != nil {
				return
			}
			sellingPlayStation := dto.FormatBestSellingPlayStation(autoGenerateds)
			p.Facade.SellingPlayStation.InsertSellingPlayStation(sellingPlayStation)
		case dto.GameRequestDTO:
			autoGenerateds, err := p.GoogleSheet.SheetGoogleApi(upload.SpreadsheetId, upload.Sheet)
			if err != nil {
				return
			}
			games := dto.FormatGame(autoGenerateds)
			p.Facade.Game.InsertGame(games)
		case dto.SeattleWeatherRequestDTO:
			autoGenerateds, err := p.GoogleSheet.SheetGoogleApi(upload.SpreadsheetId, upload.Sheet)
			if err != nil {
				return
			}
			seattleWeathes := dto.FormatSeattleWeather(autoGenerateds)
			p.Facade.SeattleWeather.InsertSeattleWeather(seattleWeathes)
		case dto.SpotifyQuarterlyRequestDTO:
			autoGenerateds, err := p.GoogleSheet.SheetGoogleApi(upload.SpreadsheetId, upload.Sheet)
			if err != nil {
				return
			}
			spotifyQuarterlies := dto.FormatSpotifyQuarterly(autoGenerateds)
			p.Facade.SpotifyQuarterly.InsertSpotifyQuarterly(spotifyQuarterlies)
		}
	}
}

func (p *ProcessState) ProcessApprove(process Process) {

}

func (a *ProcessState) ApproveProcess(_ context.Context, process ProcessState) error {

	return nil
}

func (a *ProcessState) SendAbandonedProcess(_ context.Context, isApprove bool) error {

	return nil
}
