package dto

import "github.com/JIeeiroSst/workflow-service/pkg/excel"

type GameRequestDTO struct {
	ID            string
	Rated         string
	CreatedAt     int
	LastMoveAt    int
	Turns         int
	VictoryStatus string
	Winner        string
	IncrementCode string
	WhiteId       string
	WhiteRating   int
	BlackId       string
	BlackRating   int
	Moves         string
	OpeningEco    string
	OpeningName   string
	OpeningPly    int
	BatchID       string
}

func FormatGame(generated []excel.AutoGenerated) (games []GameRequestDTO) {
	for _, value := range generated {
		var game GameRequestDTO
		for i := 0; i < len(value.Values); i++ {
			switch i {
			case 1:
				game.ID = value.Values[i].UserEnteredValue.StringValue
			case 2:
				game.Rated = value.Values[i].UserEnteredValue.StringValue
			case 3:
				game.CreatedAt = value.Values[i].UserEnteredValue.NumberValue
			case 4:
				game.LastMoveAt = value.Values[i].UserEnteredValue.NumberValue
			case 5:
				game.Turns = value.Values[i].UserEnteredValue.NumberValue
			case 6:
				game.VictoryStatus = value.Values[i].UserEnteredValue.StringValue
			case 7:
				game.Winner = value.Values[i].UserEnteredValue.StringValue
			case 8:
				game.IncrementCode = value.Values[i].UserEnteredValue.StringValue
			case 9:
				game.WhiteId = value.Values[i].UserEnteredValue.StringValue
			case 10:
				game.WhiteRating = value.Values[i].UserEnteredValue.NumberValue
			case 11:
				game.BlackId = value.Values[i].UserEnteredValue.StringValue
			case 12:
				game.BlackRating = value.Values[i].UserEnteredValue.NumberValue
			case 13:
				game.Moves = value.Values[i].UserEnteredValue.StringValue
			case 14:
				game.OpeningEco = value.Values[i].UserEnteredValue.StringValue
			case 15:
				game.OpeningName = value.Values[i].UserEnteredValue.StringValue
			case 16:
				game.OpeningPly = value.Values[i].UserEnteredValue.NumberValue
			}
		}
		games = append(games, game)
	}

	return
}

func FormatLocalGame(data []map[string]interface{}) (games []GameRequestDTO) {
	for _, m := range data {
		var game GameRequestDTO
		for k, v := range m {
			switch k {
			case "id":
				game.ID = v.(string)
			case "rated":
				game.Rated = v.(string)
			case "created_at":
				game.CreatedAt = v.(int)
			case "last_move_at":
				game.LastMoveAt = v.(int)
			case "turns":
				game.Turns = v.(int)
			case "victory_status":
				game.VictoryStatus = v.(string)
			case "winner":
				game.Winner = v.(string)
			case "increment_code":
				game.IncrementCode = v.(string)
			case "white_rating":
				game.WhiteRating = v.(int)
			case "black_id":
				game.BlackId = v.(string)
			case "black_rating":
				game.BlackRating = v.(int)
			case "moves":
				game.Moves = v.(string)
			case "opening_eco":
				game.OpeningEco = v.(string)
			case "opening_name":
				game.OpeningName = v.(string)
			case "opening_ply":
				game.OpeningPly = v.(int)
			}
		}
		games = append(games, game)
	}
	return
}
