package excel

import (
	"context"
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/JIeeiroSst/workflow-service/common"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/sheets/v4"
)

type AutoGenerated struct {
	Values []struct {
		UserEnteredValue struct {
			StringValue string `json:"stringValue"`
			NumberValue int    `json:"numberValue"`
		} `json:"userEnteredValue"`
	} `json:"values"`
}

type GoogleSheet struct {
	Dir string `json:"dir"`
}

// "client_secret.json"
func authenticate(dir string) *http.Client {
	data, err := ioutil.ReadFile(dir)
	checkError(err)
	conf, err := google.JWTConfigFromJSON(data, sheets.SpreadsheetsScope)
	checkError(err)
	client := conf.Client(context.TODO())
	return client
}

func checkError(err error) {
	if err != nil {
		panic(err.Error())
	}
}

func (g *GoogleSheet) SheetGoogleApi(spreadsheetId, sheet string) (autoGenerateds []AutoGenerated, err error) {
	c := authenticate(g.Dir)
	sheetsService, err := sheets.New(c)
	if err != nil {
		return nil, err
	}
	ranges := []string{sheet}
	resp, err := sheetsService.Spreadsheets.Get(spreadsheetId).Ranges(ranges...).Fields(common.Sheet).Do()
	if err != nil {
		return nil, err
	}
	rowData := resp.Sheets[0].Data[0].RowData

	for i := 0; i < len(rowData); i++ {
		if i == 0 {
			continue
		}
		rowDataJson, err := rowData[i].MarshalJSON()
		if err != nil {
			return nil, err
		}
		var autoGenerated AutoGenerated
		if err := json.Unmarshal(rowDataJson, &autoGenerated); err != nil {
			return nil, err
		}
		autoGenerateds = append(autoGenerateds, autoGenerated)
	}
	return autoGenerateds, nil
}
