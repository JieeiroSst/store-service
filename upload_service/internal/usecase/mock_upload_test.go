// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JIeeiroSst/upload-service/internal/repository (interfaces: Uploads)

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	model "github.com/JIeeiroSst/upload-service/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUploads is a mock of Uploads interface.
type MockUploads struct {
	ctrl     *gomock.Controller
	recorder *MockUploadsMockRecorder
}

// MockUploadsMockRecorder is the mock recorder for MockUploads.
type MockUploadsMockRecorder struct {
	mock *MockUploads
}

// NewMockUploads creates a new mock instance.
func NewMockUploads(ctrl *gomock.Controller) *MockUploads {
	mock := &MockUploads{ctrl: ctrl}
	mock.recorder = &MockUploadsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploads) EXPECT() *MockUploadsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUploads) Create(arg0 context.Context, arg1 model.CreateMedia) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUploadsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUploads)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockUploads) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUploadsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUploads)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockUploads) GetAll(arg0 context.Context) ([]model.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]model.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUploadsMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUploads)(nil).GetAll), arg0)
}

// GetById mocks base method.
func (m *MockUploads) GetById(arg0 context.Context, arg1 string) (*model.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*model.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUploadsMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUploads)(nil).GetById), arg0, arg1)
}

// Update mocks base method.
func (m *MockUploads) Update(arg0 context.Context, arg1 string, arg2 model.UpdateMedia) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUploadsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUploads)(nil).Update), arg0, arg1, arg2)
}
