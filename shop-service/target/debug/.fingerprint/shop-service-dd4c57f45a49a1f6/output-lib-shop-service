{"message":"cannot find type `Strring` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/private/tmp/rust-20220719-52938-vitvrw/rustc-1.62.1-src/library/alloc/src/string.rs","byte_start":11540,"byte_end":11579,"line_start":366,"line_end":368,"column_start":1,"column_end":2,"is_primary":false,"text":[],"label":"similarly named struct `String` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/diesel_impl/cart.rs","byte_start":4914,"byte_end":4921,"line_start":175,"line_end":175,"column_start":38,"column_end":45,"is_primary":true,"text":[{"text":"    async fn delete(&self, user_id: &Strring, delete_cart: &DeleteCart) -> RepoResult<()> {","highlight_start":38,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src/diesel_impl/cart.rs","byte_start":4914,"byte_end":4921,"line_start":175,"line_end":175,"column_start":38,"column_end":45,"is_primary":true,"text":[{"text":"    async fn delete(&self, user_id: &Strring, delete_cart: &DeleteCart) -> RepoResult<()> {","highlight_start":38,"highlight_end":45}],"label":null,"suggested_replacement":"String","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `Strring` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cart.rs:175:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    async fn delete(&self, user_id: &Strring, delete_cart: &DeleteCart) -> RepoResult<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `String`\u001b[0m\n\n"}
{"message":"unused imports: `QueryParams`, `ResultPaging`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/domain/media.rs","byte_start":113,"byte_end":124,"line_start":5,"line_end":5,"column_start":19,"column_end":30,"is_primary":true,"text":[{"text":"use crate::core::{QueryParams, RepoResult, ResultPaging};","highlight_start":19,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/domain/media.rs","byte_start":138,"byte_end":150,"line_start":5,"line_end":5,"column_start":44,"column_end":56,"is_primary":true,"text":[{"text":"use crate::core::{QueryParams, RepoResult, ResultPaging};","highlight_start":44,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/domain/media.rs","byte_start":113,"byte_end":126,"line_start":5,"line_end":5,"column_start":19,"column_end":32,"is_primary":true,"text":[{"text":"use crate::core::{QueryParams, RepoResult, ResultPaging};","highlight_start":19,"highlight_end":32}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/domain/media.rs","byte_start":136,"byte_end":150,"line_start":5,"line_end":5,"column_start":42,"column_end":56,"is_primary":true,"text":[{"text":"use crate::core::{QueryParams, RepoResult, ResultPaging};","highlight_start":42,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `QueryParams`, `ResultPaging`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/domain/media.rs:5:19\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::core::{QueryParams, RepoResult, ResultPaging};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `id`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/diesel_impl/cart.rs","byte_start":5070,"byte_end":5072,"line_start":177,"line_end":177,"column_start":41,"column_end":43,"is_primary":true,"text":[{"text":"        use super::schema::carts::dsl::{id, carts};","highlight_start":41,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/diesel_impl/cart.rs","byte_start":5070,"byte_end":5074,"line_start":177,"line_end":177,"column_start":41,"column_end":45,"is_primary":true,"text":[{"text":"        use super::schema::carts::dsl::{id, carts};","highlight_start":41,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `id`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cart.rs:177:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        use super::schema::carts::dsl::{id, carts};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\n"}
{"message":"unused import: `crate::domain::Product`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":243,"byte_end":265,"line_start":13,"line_end":13,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"use crate::domain::Product;","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":239,"byte_end":266,"line_start":13,"line_end":13,"column_start":1,"column_end":28,"is_primary":true,"text":[{"text":"use crate::domain::Product;","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::domain::Product`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cartItem.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::domain::Product;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `id`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":4421,"byte_end":4423,"line_start":150,"line_end":150,"column_start":46,"column_end":48,"is_primary":true,"text":[{"text":"        use super::schema::cart_items::dsl::{id, cart_items};","highlight_start":46,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":4421,"byte_end":4425,"line_start":150,"line_end":150,"column_start":46,"column_end":50,"is_primary":true,"text":[{"text":"        use super::schema::cart_items::dsl::{id, cart_items};","highlight_start":46,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `id`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cartItem.rs:150:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        use super::schema::cart_items::dsl::{id, cart_items};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\n"}
{"message":"unused imports: `QueryParams`, `ResultPaging`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/diesel_impl/media.rs","byte_start":257,"byte_end":268,"line_start":13,"line_end":13,"column_start":19,"column_end":30,"is_primary":true,"text":[{"text":"use crate::core::{QueryParams, RepoResult, ResultPaging};","highlight_start":19,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/diesel_impl/media.rs","byte_start":282,"byte_end":294,"line_start":13,"line_end":13,"column_start":44,"column_end":56,"is_primary":true,"text":[{"text":"use crate::core::{QueryParams, RepoResult, ResultPaging};","highlight_start":44,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/diesel_impl/media.rs","byte_start":257,"byte_end":270,"line_start":13,"line_end":13,"column_start":19,"column_end":32,"is_primary":true,"text":[{"text":"use crate::core::{QueryParams, RepoResult, ResultPaging};","highlight_start":19,"highlight_end":32}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/diesel_impl/media.rs","byte_start":280,"byte_end":294,"line_start":13,"line_end":13,"column_start":42,"column_end":56,"is_primary":true,"text":[{"text":"use crate::core::{QueryParams, RepoResult, ResultPaging};","highlight_start":42,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `QueryParams`, `ResultPaging`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/media.rs:13:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::core::{QueryParams, RepoResult, ResultPaging};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `tonic::codegen::ok`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":106,"byte_end":124,"line_start":6,"line_end":6,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use tonic::codegen::ok;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":102,"byte_end":125,"line_start":6,"line_end":6,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use tonic::codegen::ok;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `tonic::codegen::ok`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse tonic::codegen::ok;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::domain::Media`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":407,"byte_end":427,"line_start":16,"line_end":16,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"use crate::domain::Media;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":403,"byte_end":428,"line_start":16,"line_end":16,"column_start":1,"column_end":26,"is_primary":true,"text":[{"text":"use crate::domain::Media;","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::domain::Media`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:16:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::domain::Media;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the trait bound `u16: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cart.rs","byte_start":385,"byte_end":395,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cart.rs","byte_start":385,"byte_end":395,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<Integer>` for `u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cart.rs:16:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<Integer>` for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cart.rs","byte_start":385,"byte_end":395,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cart.rs","byte_start":385,"byte_end":395,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cart.rs:16:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cart.rs","byte_start":385,"byte_end":395,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cart.rs","byte_start":385,"byte_end":395,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&'insert u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<Integer>` for `&'insert u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cart.rs:16:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&'insert u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<Integer>` for `&'insert u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cart.rs","byte_start":385,"byte_end":395,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cart.rs","byte_start":385,"byte_end":395,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&'insert NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&'insert NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cart.rs:16:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&'insert NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&'insert NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cart.rs","byte_start":385,"byte_end":395,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cart.rs","byte_start":385,"byte_end":395,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<Integer>` for `&u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cart.rs:16:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<Integer>` for `&u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cart.rs","byte_start":385,"byte_end":395,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cart.rs","byte_start":385,"byte_end":395,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cart.rs:16:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: AppearsOnTable<schema::carts::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cart.rs","byte_start":1384,"byte_end":1395,"line_start":57,"line_end":57,"column_start":24,"column_end":35,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":"the trait `AppearsOnTable<schema::carts::table>` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cart.rs","byte_start":1384,"byte_end":1395,"line_start":57,"line_end":57,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":1141,"byte_end":1202,"line_start":56,"line_end":56,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <&'a T as AppearsOnTable<QS>>\n  <(A, B) as AppearsOnTable<QS>>\n  <(A, B, C) as AppearsOnTable<QS>>\n  <(A, B, C, D) as AppearsOnTable<QS>>\n  <(A, B, C, D, E) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AppearsOnTable<schema::carts::table>` for `&'update u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::carts::columns::total, &'update u16>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: AppearsOnTable<schema::carts::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cart.rs:57:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, Clone, AsChangeset)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<schema::carts::table>` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             <&'a T as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AppearsOnTable<schema::carts::table>` for `&'update u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::carts::columns::total, &'update u16>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: AppearsOnTable<schema::carts::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cart.rs","byte_start":1384,"byte_end":1395,"line_start":57,"line_end":57,"column_start":24,"column_end":35,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":"the trait `AppearsOnTable<schema::carts::table>` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cart.rs","byte_start":1384,"byte_end":1395,"line_start":57,"line_end":57,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":1141,"byte_end":1202,"line_start":56,"line_end":56,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <&'a T as AppearsOnTable<QS>>\n  <(A, B) as AppearsOnTable<QS>>\n  <(A, B, C) as AppearsOnTable<QS>>\n  <(A, B, C, D) as AppearsOnTable<QS>>\n  <(A, B, C, D, E) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AppearsOnTable<schema::carts::table>` for `&u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::carts::columns::total, &u16>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: AppearsOnTable<schema::carts::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cart.rs:57:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, Clone, AsChangeset)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<schema::carts::table>` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             <&'a T as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AppearsOnTable<schema::carts::table>` for `&u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::carts::columns::total, &u16>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: AppearsOnTable<schema::carts::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cart.rs","byte_start":1384,"byte_end":1395,"line_start":57,"line_end":57,"column_start":24,"column_end":35,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":"the trait `AppearsOnTable<schema::carts::table>` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cart.rs","byte_start":1384,"byte_end":1395,"line_start":57,"line_end":57,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":1141,"byte_end":1202,"line_start":56,"line_end":56,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <&'a T as AppearsOnTable<QS>>\n  <(A, B) as AppearsOnTable<QS>>\n  <(A, B, C) as AppearsOnTable<QS>>\n  <(A, B, C, D) as AppearsOnTable<QS>>\n  <(A, B, C, D, E) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::carts::columns::total, u16>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: AppearsOnTable<schema::carts::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cart.rs:57:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, Clone, AsChangeset)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<schema::carts::table>` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             <&'a T as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::carts::columns::total, u16>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":434,"byte_end":444,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cartItem.rs","byte_start":434,"byte_end":444,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<Integer>` for `u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cartItem.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<Integer>` for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":434,"byte_end":444,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cartItem.rs","byte_start":434,"byte_end":444,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cartItem.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":434,"byte_end":444,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cartItem.rs","byte_start":434,"byte_end":444,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&'insert u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<Integer>` for `&'insert u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cartItem.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&'insert u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<Integer>` for `&'insert u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":434,"byte_end":444,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cartItem.rs","byte_start":434,"byte_end":444,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&'insert NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&'insert NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cartItem.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&'insert NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&'insert NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":434,"byte_end":444,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cartItem.rs","byte_start":434,"byte_end":444,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<Integer>` for `&u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cartItem.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<Integer>` for `&u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":434,"byte_end":444,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cartItem.rs","byte_start":434,"byte_end":444,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cartItem.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: AppearsOnTable<schema::cart_items::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":1430,"byte_end":1441,"line_start":59,"line_end":59,"column_start":24,"column_end":35,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":"the trait `AppearsOnTable<schema::cart_items::table>` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cartItem.rs","byte_start":1430,"byte_end":1441,"line_start":59,"line_end":59,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":1141,"byte_end":1202,"line_start":56,"line_end":56,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <&'a T as AppearsOnTable<QS>>\n  <(A, B) as AppearsOnTable<QS>>\n  <(A, B, C) as AppearsOnTable<QS>>\n  <(A, B, C, D) as AppearsOnTable<QS>>\n  <(A, B, C, D, E) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AppearsOnTable<schema::cart_items::table>` for `&'update u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::cart_items::columns::total, &'update u16>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: AppearsOnTable<schema::cart_items::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cartItem.rs:59:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, Clone, AsChangeset)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<schema::cart_items::table>` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             <&'a T as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AppearsOnTable<schema::cart_items::table>` for `&'update u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::cart_items::columns::total, &'update u16>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: AppearsOnTable<schema::cart_items::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":1430,"byte_end":1441,"line_start":59,"line_end":59,"column_start":24,"column_end":35,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":"the trait `AppearsOnTable<schema::cart_items::table>` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cartItem.rs","byte_start":1430,"byte_end":1441,"line_start":59,"line_end":59,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":1141,"byte_end":1202,"line_start":56,"line_end":56,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <&'a T as AppearsOnTable<QS>>\n  <(A, B) as AppearsOnTable<QS>>\n  <(A, B, C) as AppearsOnTable<QS>>\n  <(A, B, C, D) as AppearsOnTable<QS>>\n  <(A, B, C, D, E) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AppearsOnTable<schema::cart_items::table>` for `&u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::cart_items::columns::total, &u16>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: AppearsOnTable<schema::cart_items::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cartItem.rs:59:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, Clone, AsChangeset)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<schema::cart_items::table>` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             <&'a T as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AppearsOnTable<schema::cart_items::table>` for `&u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::cart_items::columns::total, &u16>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: AppearsOnTable<schema::cart_items::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/cartItem.rs","byte_start":1430,"byte_end":1441,"line_start":59,"line_end":59,"column_start":24,"column_end":35,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":"the trait `AppearsOnTable<schema::cart_items::table>` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/cartItem.rs","byte_start":1430,"byte_end":1441,"line_start":59,"line_end":59,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":1141,"byte_end":1202,"line_start":56,"line_end":56,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <&'a T as AppearsOnTable<QS>>\n  <(A, B) as AppearsOnTable<QS>>\n  <(A, B, C) as AppearsOnTable<QS>>\n  <(A, B, C, D) as AppearsOnTable<QS>>\n  <(A, B, C, D, E) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::cart_items::columns::total, u16>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: AppearsOnTable<schema::cart_items::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/cartItem.rs:59:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, Clone, AsChangeset)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<schema::cart_items::table>` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             <&'a T as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::cart_items::columns::total, u16>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/media.rs","byte_start":364,"byte_end":374,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/media.rs","byte_start":364,"byte_end":374,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/media.rs:16:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/media.rs","byte_start":364,"byte_end":374,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/media.rs","byte_start":364,"byte_end":374,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&'insert NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&'insert NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/media.rs:16:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&'insert NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&'insert NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/media.rs","byte_start":364,"byte_end":374,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/media.rs","byte_start":364,"byte_end":374,"line_start":16,"line_end":16,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/media.rs:16:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<Integer>` for `u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<Integer>` for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `std::string::String: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `std::string::String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<Integer>` for `std::string::String`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<Integer>` for `std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&'insert u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<Integer>` for `&'insert u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&'insert u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<Integer>` for `&'insert u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `std::string::String: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `std::string::String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&'insert std::string::String`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<Integer>` for `&'insert std::string::String`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&'insert std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<Integer>` for `&'insert std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&'insert NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&'insert NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&'insert NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&'insert NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<Integer>` for `&u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<Integer>` for `&u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `std::string::String: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `std::string::String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&std::string::String`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<Integer>` for `&std::string::String`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<Integer>` for `&std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/product.rs","byte_start":450,"byte_end":460,"line_start":18,"line_end":18,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":2243,"byte_end":2302,"line_start":86,"line_end":86,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `diesel::Expression` for `&NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Queryable, Insertable)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `diesel::Expression` for `&NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Nullable<diesel::sql_types::Time>>` for `&NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: AppearsOnTable<schema::products::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":1565,"byte_end":1576,"line_start":62,"line_end":62,"column_start":24,"column_end":35,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":"the trait `AppearsOnTable<schema::products::table>` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/product.rs","byte_start":1565,"byte_end":1576,"line_start":62,"line_end":62,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":1141,"byte_end":1202,"line_start":56,"line_end":56,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <&'a T as AppearsOnTable<QS>>\n  <(A, B) as AppearsOnTable<QS>>\n  <(A, B, C) as AppearsOnTable<QS>>\n  <(A, B, C, D) as AppearsOnTable<QS>>\n  <(A, B, C, D, E) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AppearsOnTable<schema::products::table>` for `&'update u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::products::columns::price, &'update u16>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: AppearsOnTable<schema::products::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:62:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, Clone, AsChangeset)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<schema::products::table>` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             <&'a T as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AppearsOnTable<schema::products::table>` for `&'update u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::products::columns::price, &'update u16>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: AppearsOnTable<schema::products::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":1565,"byte_end":1576,"line_start":62,"line_end":62,"column_start":24,"column_end":35,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":"the trait `AppearsOnTable<schema::products::table>` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/product.rs","byte_start":1565,"byte_end":1576,"line_start":62,"line_end":62,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":1141,"byte_end":1202,"line_start":56,"line_end":56,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <&'a T as AppearsOnTable<QS>>\n  <(A, B) as AppearsOnTable<QS>>\n  <(A, B, C) as AppearsOnTable<QS>>\n  <(A, B, C, D) as AppearsOnTable<QS>>\n  <(A, B, C, D, E) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AppearsOnTable<schema::products::table>` for `&u16`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::products::columns::price, &u16>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: AppearsOnTable<schema::products::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:62:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, Clone, AsChangeset)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<schema::products::table>` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             <&'a T as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AppearsOnTable<schema::products::table>` for `&u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::products::columns::price, &u16>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `u16: AppearsOnTable<schema::products::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/diesel_impl/product.rs","byte_start":1565,"byte_end":1576,"line_start":62,"line_end":62,"column_start":24,"column_end":35,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":"the trait `AppearsOnTable<schema::products::table>` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/diesel_impl/product.rs","byte_start":1565,"byte_end":1576,"line_start":62,"line_end":62,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"#[derive(Debug, Clone, AsChangeset)]","highlight_start":24,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/alainsst/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel_derives-1.4.1/src/lib.rs","byte_start":1141,"byte_end":1202,"line_start":56,"line_end":56,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <&'a T as AppearsOnTable<QS>>\n  <(A, B) as AppearsOnTable<QS>>\n  <(A, B, C) as AppearsOnTable<QS>>\n  <(A, B, C, D) as AppearsOnTable<QS>>\n  <(A, B, C, D, E) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\n  <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\nand 119 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::products::columns::price, u16>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: AppearsOnTable<schema::products::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/diesel_impl/product.rs:62:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, Clone, AsChangeset)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<schema::products::table>` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             <&'a T as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(A, B, C, D, E, F, G, H) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m           and 119 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `AsChangeset` for `diesel::expression::operators::Eq<schema::products::columns::price, u16>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 34 previous errors; 7 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 34 previous errors; 7 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0412.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0412.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
