// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: authorize-service/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthorizeService_Authorize_FullMethodName         = "/user.AuthorizeService/Authorize"
	AuthorizeService_GetCasbinRules_FullMethodName    = "/user.AuthorizeService/GetCasbinRules"
	AuthorizeService_GetCasbinRuleById_FullMethodName = "/user.AuthorizeService/GetCasbinRuleById"
	AuthorizeService_CreateCasbinRule_FullMethodName  = "/user.AuthorizeService/CreateCasbinRule"
	AuthorizeService_DeleteCasbinRule_FullMethodName  = "/user.AuthorizeService/DeleteCasbinRule"
	AuthorizeService_UpdateCasbinRule_FullMethodName  = "/user.AuthorizeService/UpdateCasbinRule"
	AuthorizeService_CreateOTP_FullMethodName         = "/user.AuthorizeService/CreateOTP"
	AuthorizeService_AuthorizeOTP_FullMethodName      = "/user.AuthorizeService/AuthorizeOTP"
	AuthorizeService_EnforceCasbin_FullMethodName     = "/user.AuthorizeService/EnforceCasbin"
)

// AuthorizeServiceClient is the client API for AuthorizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizeServiceClient interface {
	Authorize(ctx context.Context, in *CasbinAuth, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	GetCasbinRules(ctx context.Context, in *CasbinRequest, opts ...grpc.CallOption) (*CasbinRuleList, error)
	GetCasbinRuleById(ctx context.Context, in *CasbinRuleId, opts ...grpc.CallOption) (*CasbinRule, error)
	CreateCasbinRule(ctx context.Context, in *CasbinRule, opts ...grpc.CallOption) (*CasbinRule, error)
	DeleteCasbinRule(ctx context.Context, in *CasbinRuleId, opts ...grpc.CallOption) (*DeleteCasbinRuleResponse, error)
	UpdateCasbinRule(ctx context.Context, in *UpdateCasbinRuleRequest, opts ...grpc.CallOption) (*CasbinRule, error)
	CreateOTP(ctx context.Context, in *CreateOTPRequest, opts ...grpc.CallOption) (*CreateOTPResponse, error)
	AuthorizeOTP(ctx context.Context, in *AuthorizeOTPRequest, opts ...grpc.CallOption) (*AuthorizeOTPResponse, error)
	EnforceCasbin(ctx context.Context, in *CasbinRuleRequest, opts ...grpc.CallOption) (*CasbinRuleReponse, error)
}

type authorizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizeServiceClient(cc grpc.ClientConnInterface) AuthorizeServiceClient {
	return &authorizeServiceClient{cc}
}

func (c *authorizeServiceClient) Authorize(ctx context.Context, in *CasbinAuth, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, AuthorizeService_Authorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceClient) GetCasbinRules(ctx context.Context, in *CasbinRequest, opts ...grpc.CallOption) (*CasbinRuleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CasbinRuleList)
	err := c.cc.Invoke(ctx, AuthorizeService_GetCasbinRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceClient) GetCasbinRuleById(ctx context.Context, in *CasbinRuleId, opts ...grpc.CallOption) (*CasbinRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CasbinRule)
	err := c.cc.Invoke(ctx, AuthorizeService_GetCasbinRuleById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceClient) CreateCasbinRule(ctx context.Context, in *CasbinRule, opts ...grpc.CallOption) (*CasbinRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CasbinRule)
	err := c.cc.Invoke(ctx, AuthorizeService_CreateCasbinRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceClient) DeleteCasbinRule(ctx context.Context, in *CasbinRuleId, opts ...grpc.CallOption) (*DeleteCasbinRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCasbinRuleResponse)
	err := c.cc.Invoke(ctx, AuthorizeService_DeleteCasbinRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceClient) UpdateCasbinRule(ctx context.Context, in *UpdateCasbinRuleRequest, opts ...grpc.CallOption) (*CasbinRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CasbinRule)
	err := c.cc.Invoke(ctx, AuthorizeService_UpdateCasbinRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceClient) CreateOTP(ctx context.Context, in *CreateOTPRequest, opts ...grpc.CallOption) (*CreateOTPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOTPResponse)
	err := c.cc.Invoke(ctx, AuthorizeService_CreateOTP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceClient) AuthorizeOTP(ctx context.Context, in *AuthorizeOTPRequest, opts ...grpc.CallOption) (*AuthorizeOTPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizeOTPResponse)
	err := c.cc.Invoke(ctx, AuthorizeService_AuthorizeOTP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceClient) EnforceCasbin(ctx context.Context, in *CasbinRuleRequest, opts ...grpc.CallOption) (*CasbinRuleReponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CasbinRuleReponse)
	err := c.cc.Invoke(ctx, AuthorizeService_EnforceCasbin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizeServiceServer is the server API for AuthorizeService service.
// All implementations must embed UnimplementedAuthorizeServiceServer
// for forward compatibility.
type AuthorizeServiceServer interface {
	Authorize(context.Context, *CasbinAuth) (*AuthorizeResponse, error)
	GetCasbinRules(context.Context, *CasbinRequest) (*CasbinRuleList, error)
	GetCasbinRuleById(context.Context, *CasbinRuleId) (*CasbinRule, error)
	CreateCasbinRule(context.Context, *CasbinRule) (*CasbinRule, error)
	DeleteCasbinRule(context.Context, *CasbinRuleId) (*DeleteCasbinRuleResponse, error)
	UpdateCasbinRule(context.Context, *UpdateCasbinRuleRequest) (*CasbinRule, error)
	CreateOTP(context.Context, *CreateOTPRequest) (*CreateOTPResponse, error)
	AuthorizeOTP(context.Context, *AuthorizeOTPRequest) (*AuthorizeOTPResponse, error)
	EnforceCasbin(context.Context, *CasbinRuleRequest) (*CasbinRuleReponse, error)
	mustEmbedUnimplementedAuthorizeServiceServer()
}

// UnimplementedAuthorizeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorizeServiceServer struct{}

func (UnimplementedAuthorizeServiceServer) Authorize(context.Context, *CasbinAuth) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAuthorizeServiceServer) GetCasbinRules(context.Context, *CasbinRequest) (*CasbinRuleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCasbinRules not implemented")
}
func (UnimplementedAuthorizeServiceServer) GetCasbinRuleById(context.Context, *CasbinRuleId) (*CasbinRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCasbinRuleById not implemented")
}
func (UnimplementedAuthorizeServiceServer) CreateCasbinRule(context.Context, *CasbinRule) (*CasbinRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCasbinRule not implemented")
}
func (UnimplementedAuthorizeServiceServer) DeleteCasbinRule(context.Context, *CasbinRuleId) (*DeleteCasbinRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCasbinRule not implemented")
}
func (UnimplementedAuthorizeServiceServer) UpdateCasbinRule(context.Context, *UpdateCasbinRuleRequest) (*CasbinRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCasbinRule not implemented")
}
func (UnimplementedAuthorizeServiceServer) CreateOTP(context.Context, *CreateOTPRequest) (*CreateOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOTP not implemented")
}
func (UnimplementedAuthorizeServiceServer) AuthorizeOTP(context.Context, *AuthorizeOTPRequest) (*AuthorizeOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeOTP not implemented")
}
func (UnimplementedAuthorizeServiceServer) EnforceCasbin(context.Context, *CasbinRuleRequest) (*CasbinRuleReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnforceCasbin not implemented")
}
func (UnimplementedAuthorizeServiceServer) mustEmbedUnimplementedAuthorizeServiceServer() {}
func (UnimplementedAuthorizeServiceServer) testEmbeddedByValue()                          {}

// UnsafeAuthorizeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizeServiceServer will
// result in compilation errors.
type UnsafeAuthorizeServiceServer interface {
	mustEmbedUnimplementedAuthorizeServiceServer()
}

func RegisterAuthorizeServiceServer(s grpc.ServiceRegistrar, srv AuthorizeServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthorizeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthorizeService_ServiceDesc, srv)
}

func _AuthorizeService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizeService_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServiceServer).Authorize(ctx, req.(*CasbinAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizeService_GetCasbinRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServiceServer).GetCasbinRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizeService_GetCasbinRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServiceServer).GetCasbinRules(ctx, req.(*CasbinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizeService_GetCasbinRuleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRuleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServiceServer).GetCasbinRuleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizeService_GetCasbinRuleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServiceServer).GetCasbinRuleById(ctx, req.(*CasbinRuleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizeService_CreateCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServiceServer).CreateCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizeService_CreateCasbinRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServiceServer).CreateCasbinRule(ctx, req.(*CasbinRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizeService_DeleteCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRuleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServiceServer).DeleteCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizeService_DeleteCasbinRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServiceServer).DeleteCasbinRule(ctx, req.(*CasbinRuleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizeService_UpdateCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCasbinRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServiceServer).UpdateCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizeService_UpdateCasbinRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServiceServer).UpdateCasbinRule(ctx, req.(*UpdateCasbinRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizeService_CreateOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServiceServer).CreateOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizeService_CreateOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServiceServer).CreateOTP(ctx, req.(*CreateOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizeService_AuthorizeOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServiceServer).AuthorizeOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizeService_AuthorizeOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServiceServer).AuthorizeOTP(ctx, req.(*AuthorizeOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizeService_EnforceCasbin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServiceServer).EnforceCasbin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizeService_EnforceCasbin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServiceServer).EnforceCasbin(ctx, req.(*CasbinRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizeService_ServiceDesc is the grpc.ServiceDesc for AuthorizeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.AuthorizeService",
	HandlerType: (*AuthorizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _AuthorizeService_Authorize_Handler,
		},
		{
			MethodName: "GetCasbinRules",
			Handler:    _AuthorizeService_GetCasbinRules_Handler,
		},
		{
			MethodName: "GetCasbinRuleById",
			Handler:    _AuthorizeService_GetCasbinRuleById_Handler,
		},
		{
			MethodName: "CreateCasbinRule",
			Handler:    _AuthorizeService_CreateCasbinRule_Handler,
		},
		{
			MethodName: "DeleteCasbinRule",
			Handler:    _AuthorizeService_DeleteCasbinRule_Handler,
		},
		{
			MethodName: "UpdateCasbinRule",
			Handler:    _AuthorizeService_UpdateCasbinRule_Handler,
		},
		{
			MethodName: "CreateOTP",
			Handler:    _AuthorizeService_CreateOTP_Handler,
		},
		{
			MethodName: "AuthorizeOTP",
			Handler:    _AuthorizeService_AuthorizeOTP_Handler,
		},
		{
			MethodName: "EnforceCasbin",
			Handler:    _AuthorizeService_EnforceCasbin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorize-service/service.proto",
}
