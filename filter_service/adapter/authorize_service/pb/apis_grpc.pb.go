// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.7.1
// source: adapter/authorize_service/apis.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizeClient is the client API for Authorize service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizeClient interface {
	EnforceCasbin(ctx context.Context, in *CasbinRuleRequest, opts ...grpc.CallOption) (*CasbinRuleReponse, error)
}

type authorizeClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizeClient(cc grpc.ClientConnInterface) AuthorizeClient {
	return &authorizeClient{cc}
}

func (c *authorizeClient) EnforceCasbin(ctx context.Context, in *CasbinRuleRequest, opts ...grpc.CallOption) (*CasbinRuleReponse, error) {
	out := new(CasbinRuleReponse)
	err := c.cc.Invoke(ctx, "/project_grpc.Authorize/EnforceCasbin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizeServer is the server API for Authorize service.
// All implementations must embed UnimplementedAuthorizeServer
// for forward compatibility
type AuthorizeServer interface {
	EnforceCasbin(context.Context, *CasbinRuleRequest) (*CasbinRuleReponse, error)
	mustEmbedUnimplementedAuthorizeServer()
}

// UnimplementedAuthorizeServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizeServer struct {
}

func (UnimplementedAuthorizeServer) EnforceCasbin(context.Context, *CasbinRuleRequest) (*CasbinRuleReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnforceCasbin not implemented")
}
func (UnimplementedAuthorizeServer) mustEmbedUnimplementedAuthorizeServer() {}

// UnsafeAuthorizeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizeServer will
// result in compilation errors.
type UnsafeAuthorizeServer interface {
	mustEmbedUnimplementedAuthorizeServer()
}

func RegisterAuthorizeServer(s grpc.ServiceRegistrar, srv AuthorizeServer) {
	s.RegisterService(&Authorize_ServiceDesc, srv)
}

func _Authorize_EnforceCasbin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServer).EnforceCasbin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project_grpc.Authorize/EnforceCasbin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServer).EnforceCasbin(ctx, req.(*CasbinRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorize_ServiceDesc is the grpc.ServiceDesc for Authorize service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorize_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project_grpc.Authorize",
	HandlerType: (*AuthorizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnforceCasbin",
			Handler:    _Authorize_EnforceCasbin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adapter/authorize_service/apis.proto",
}
