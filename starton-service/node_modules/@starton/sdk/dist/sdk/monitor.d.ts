import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosRequestConfig } from "axios";
/**
 * The list of conditions that trigger a watcher event
 */
export declare class Monitor {
    private sdkConfiguration;
    constructor(sdkConfig: SDKConfiguration);
    /**
     * Create a New Watcher
     *
     * @remarks
     * Adds a new watcher to the current project to start monitoring an address.
     */
    create(req: shared.CreateWatcherDto, config?: AxiosRequestConfig): Promise<operations.CreateWatcherResponse>;
    /**
     * Delete a watcher
     *
     * @remarks
     * Removes a specific watcher from the current project. This action is irreversible.
     */
    delete(req: operations.DeleteWatcherRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWatcherResponse>;
    /**
     * Retrieve List of Watchers
     *
     * @remarks
     * Fetches list of all watchers associated with the current project.
     */
    getAll(req: operations.GetAllWatcherRequest, config?: AxiosRequestConfig): Promise<operations.GetAllWatcherResponse>;
    /**
     * Fetches the list of events for a watcher
     *
     * @remarks
     * Fetches a list of all events linked to a specific watcher, identified by {id}.
     */
    getAllEvents(req: operations.GetAllWatcherEventRequest, config?: AxiosRequestConfig): Promise<operations.GetAllWatcherEventResponse>;
    /**
     * Get a specific watcher
     *
     * @remarks
     * Retrieves detailed information about a specific watcher identified by its unique {id} within the current project.
     */
    getOne(req: operations.GetOneWatcherRequest, config?: AxiosRequestConfig): Promise<operations.GetOneWatcherResponse>;
    /**
     * Get a watcher event
     *
     * @remarks
     * Retrieves information about a specific watcher event.
     */
    getOneEvent(req: operations.GetOneWatcherEventRequest, config?: AxiosRequestConfig): Promise<operations.GetOneWatcherEventResponse>;
    /**
     * Update a watcher
     *
     * @remarks
     * Modifies the properties of an existing watcher. Only the fields provided in the request body will be updated.
     */
    update(req: operations.UpdateWatcherRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWatcherResponse>;
}
