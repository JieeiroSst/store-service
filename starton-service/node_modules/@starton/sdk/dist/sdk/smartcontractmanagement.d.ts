import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosRequestConfig } from "axios";
/**
 * The Smart contract management is an abstraction on top of our **Transaction Manager** and it allow you to build and automate your smart contract transaction easily, without struggling with the ABI and params encoding. With it you can:
 *
 * @remarks
 * - **Deploying smart contract:** Deploy **audited** contract from our library or your own smart contract
 * - **Import existing contract:** Import existing contract to view them on your dashboard and interact with them.
 * - **Interact:** Read state and interact with the smart contract previously deployed or imported
 */
export declare class SmartContractManagement {
    private sdkConfiguration;
    constructor(sdkConfig: SDKConfiguration);
    /**
     * Execute Smart Contract Function
     *
     * @remarks
     * Calls a specific function within a deployed smart contract, enabling interactions such as executing transactions or querying state. The method parameters, including the smart contract address and network, need to be specified.
     */
    call(req: operations.CallSmartContractRequest, config?: AxiosRequestConfig): Promise<operations.CallSmartContractResponse>;
    /**
     * Delete a smart contract
     *
     * @remarks
     * Deletes a specific smart contract based on network and address.
     */
    delete(req: operations.DeleteSmartContractRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSmartContractResponse>;
    /**
     * Deploy from bytecode (your own contract)
     *
     * @remarks
     * Deploys a smart contract from bytecode and returns transaction details.
     */
    deployFromBytecode(req: operations.DeployFromBytecodeSmartContractRequest, config?: AxiosRequestConfig): Promise<operations.DeployFromBytecodeSmartContractResponse>;
    /**
     * Deploy Smart Contract from Template
     *
     * @remarks
     * Deploy from Starton audited smart contract template.
     */
    deployFromTemplate(req: operations.DeployFromTemplateSmartContractRequest, config?: AxiosRequestConfig): Promise<operations.DeployFromTemplateSmartContractResponse>;
    /**
     * Get all smart contracts
     *
     * @remarks
     * Fetches and returns the list of smart contracts.
     */
    getAll(req: operations.GetAllSmartContractRequest, config?: AxiosRequestConfig): Promise<operations.GetAllSmartContractResponse>;
    /**
     * Retrieves Smart Contract Functions and Events
     *
     * @remarks
     * Provides a list of the available read and write functions, as well as events, of a specified smart contract. This can be used to understand how to interact with the contract.
     */
    getFunctions(req: operations.GetAvailableFunctionsSmartContractRequest, config?: AxiosRequestConfig): Promise<operations.GetAvailableFunctionsSmartContractResponse>;
    /**
     * Get a single smart contract
     *
     * @remarks
     * Fetches details of a specific smart contract based on network and address.
     */
    getOne(req: operations.GetOneSmartContractRequest, config?: AxiosRequestConfig): Promise<operations.GetOneSmartContractResponse>;
    /**
     * Import Existing Smart Contract
     *
     * @remarks
     * Import an already deployed smart contract into the project. This requires providing the smart contract’s address, ABI, and the network it’s deployed on.
     */
    importExisting(req: shared.ImportSmartContractDto, config?: AxiosRequestConfig): Promise<operations.ImportExistingSmartContractResponse>;
    /**
     * Query Smart Contract Function
     *
     * @remarks
     * Reads data from a smart contract by calling one of its functions without making any state changes on the blockchain. This is typically used for retrieving information from the contract.
     */
    read(req: operations.ReadSmartContractRequest, config?: AxiosRequestConfig): Promise<operations.ReadSmartContractResponse>;
    /**
     * Update a smart contract
     *
     * @remarks
     * Updates and returns details of a specific smart contract based on network and address.
     */
    update(req: operations.UpdateSmartContractRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSmartContractResponse>;
}
