"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Starton = exports.SDKConfiguration = exports.ServerList = void 0;
var shared = __importStar(require("../sdk/models/shared"));
var data_1 = require("./data");
var ipfs_1 = require("./ipfs");
var kms_1 = require("./kms");
var monitor_1 = require("./monitor");
var network_1 = require("./network");
var project_1 = require("./project");
var smartcontract_1 = require("./smartcontract");
var smartcontractmanagement_1 = require("./smartcontractmanagement");
var transactionmanager_1 = require("./transactionmanager");
var wallet_1 = require("./wallet");
var webhook_1 = require("./webhook");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://api.starton.com"];
var SDKConfiguration = /** @class */ (function () {
    function SDKConfiguration(init) {
        this.language = "typescript";
        this.openapiDocVersion = "1.0";
        this.sdkVersion = "0.3.4";
        this.genVersion = "2.194.1";
        this.userAgent = "speakeasy-sdk/typescript 0.3.4 2.194.1 1.0 @starton/sdk";
        Object.assign(this, init);
    }
    return SDKConfiguration;
}());
exports.SDKConfiguration = SDKConfiguration;
/**
 * Starton API: Documentation: # Introduction
 *
 * @remarks
 *
 * Starton is the all-in-one WEB3 api to integrate blockchain feature inside your project.
 *
 * # Authentication
 *
 * To access API endpoints, you must provide a valid API key. You can create new
 * API keys in your [account settings](https://app.starton.com/projects/default/developer). Be
 * careful when handling your keys as they give access to all your project,
 * you should treat them like passwords and they should never be committed to
 * source control.
 *
 * To authenticate with API, you can supply the API key as a header
 * (`x-api-key: YOUR_API_KEY`).
 *
 * Some API endpoints allow unauthenticated requests for public resources and
 * they can be called without an API key.
 *
 * # Errors
 *
 * All successful API requests will be returned with a 200 or 201 status code.
 *  If there’s an error while making the
 * request, the appropriate status code is returned with the error message:
 *
 * ```
 * {
 * 	"statusCode": 401,
 * 	"errorCode": "NOT_AUTHENTICATED",
 * 	"message": "Not authenticated",
 * 	"timestamp": "2023-10-14T00:12:22.470Z",
 * 	"path": "/v3/project",
 * 	"context": {},
 * }
 * ```
 *
 * # Pagination
 *
 * Most top-level API resources have support for `getAll` API methods. For instance,
 * you can list smart contracts, webhooks, templates etc. These list methods share
 * common parameters, taking both `limit` and `page`.
 *
 * Responses will be in the root `meta` and `items` key. For example:
 *
 * ```
 * {
 * 	data: […],
 * 	meta: {
 * 		itemCount: 10,
 * 		totalItems: 50,
 * 		itemsPerPage: 10,
 * 		totalPages: 5
 * 		currentPage: 1
 * 	}
 * }
 * ```
 *
 *
 * # Rate limits
 *
 * Depending on your plan, you will benefit from a specific rate limit.
 *
 * | Plan      | Rate limit               |
 * |-----------|--------------------------|
 * | Free      | 50 requests/min          |
 * | Developer | 100 requests/min         |
 * | Business  | up to 10000 requests/min |
 *
 */
var Starton = /** @class */ (function () {
    function Starton(props) {
        var _a, _b;
        var serverURL = props === null || props === void 0 ? void 0 : props.serverURL;
        var serverIdx = (_a = props === null || props === void 0 ? void 0 : props.serverIdx) !== null && _a !== void 0 ? _a : 0;
        if (!serverURL) {
            serverURL = exports.ServerList[serverIdx];
        }
        var defaultClient = (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: new shared.Security({ startonApiKey: props === null || props === void 0 ? void 0 : props.startonApiKey }),
            serverURL: serverURL,
            retryConfig: props === null || props === void 0 ? void 0 : props.retryConfig,
        });
        this.data = new data_1.Data(this.sdkConfiguration);
        this.wallet = new wallet_1.Wallet(this.sdkConfiguration);
        this.ipfs = new ipfs_1.Ipfs(this.sdkConfiguration);
        this.kms = new kms_1.Kms(this.sdkConfiguration);
        this.transactionManager = new transactionmanager_1.TransactionManager(this.sdkConfiguration);
        this.network = new network_1.Network(this.sdkConfiguration);
        this.project = new project_1.Project(this.sdkConfiguration);
        this.smartContractManagement = new smartcontractmanagement_1.SmartContractManagement(this.sdkConfiguration);
        this.smartContract = new smartcontract_1.SmartContract(this.sdkConfiguration);
        this.monitor = new monitor_1.Monitor(this.sdkConfiguration);
        this.webhook = new webhook_1.Webhook(this.sdkConfiguration);
    }
    return Starton;
}());
exports.Starton = Starton;
