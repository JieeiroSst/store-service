import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosRequestConfig } from "axios";
/**
 * IPFS allows users to host and receive content in a manner similar to BitTorrent. As opposed to a centrally located server, IPFS is built around a decentralized system creating a resilient system of file storage and sharing. Starton IPFS storage service acts as a liaison between the IPFS protocol and you, with a user-friendly interface that lets you pin or upload files as you would any other storage service. You get all the benefits of hosting your content on the protocol while still having the easy process of uploading it.
 */
export declare class Ipfs {
    private sdkConfiguration;
    constructor(sdkConfig: SDKConfiguration);
    /**
     * Deletes pinned file referenced by {id}
     *
     * @remarks
     * Unpin a previously pinned file by providing the specific {id} associated with the file.
     */
    delete(req: operations.DeletePinRequest, config?: AxiosRequestConfig): Promise<operations.DeletePinResponse>;
    /**
     * Retrieve all files
     *
     * @remarks
     * Retrieve a list of files that have been pinned on IPFS.
     */
    getAll(req: operations.GetAllPinRequest, config?: AxiosRequestConfig): Promise<operations.GetAllPinResponse>;
    /**
     * Retrieve a Specific File
     *
     * @remarks
     * Fetches the details of a specific file that has been previously uploaded to IPFS, using its unique identifier.
     */
    getOne(req: operations.GetOnePinRequest, config?: AxiosRequestConfig): Promise<operations.GetOnePinResponse>;
    /**
     * Retrieve Current Storage Usage
     *
     * @remarks
     * Fetches the current storage utilization details for the project, providing insights into the used space, total allowance, and remaining free space.
     */
    getStorageUsed(config?: AxiosRequestConfig): Promise<operations.GetStorageUsedPinResponse>;
    /**
     * Pin Existing IPFS File
     *
     * @remarks
     * Requests Starton to retain a copy of a file that has already been uploaded to IPFS, ensuring its availability.
     */
    pinExistingFile(req: shared.CreatePinDto, config?: AxiosRequestConfig): Promise<operations.CreatePinResponse>;
    /**
     * Update File Details
     *
     * @remarks
     * Modifies the name or metadata of an existing file stored in IPFS. Note that direct edits to the file content are not possible; any changes to the content require re-uploading and will result in a new unique hash for the file.
     */
    update(req: operations.UpdatePinRequest, config?: AxiosRequestConfig): Promise<operations.UpdatePinResponse>;
    /**
     * Upload a file
     *
     * @remarks
     * Safely upload a file to IPFS, ensuring it gets securely pinned for reliable retrieval, and receive a unique CID as a reference to the uploaded content. THE BODY PARAMETERS ARE FORM PARAMETERS FOR THIS ENDPOINT.
     */
    uploadFile(req: operations.UploadFromFilePinRequestBody, config?: AxiosRequestConfig): Promise<operations.UploadFromFilePinResponse>;
    /**
     * Upload a folder
     *
     * @remarks
     * Upload an entire folder to IPFS, ensuring secure pinning of its contents for reliable retrieval. This endpoint expects a multipart/form-data payload, consisting of an optional metadata object and an array of files. The successful upload of the folder will result in a unique Content Identifier (CID) reference, which can be used to fetch the folder and its contents from IPFS at any time.
     */
    uploadFolder(req: operations.UploadFromFolderPinRequestBody, config?: AxiosRequestConfig): Promise<operations.UploadFromFolderPinResponse>;
    /**
     * Upload a JSON file
     *
     * @remarks
     * Upload a JSON file to IPFS with pinning for reliable access, associating it with a unique CID.
     */
    uploadJson(req: shared.UploadJsonDto, config?: AxiosRequestConfig): Promise<operations.UploadFromJsonPinResponse>;
}
