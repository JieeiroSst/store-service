"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webhook = void 0;
var utils = __importStar(require("../internal/utils"));
var errors = __importStar(require("../sdk/models/errors"));
var operations = __importStar(require("../sdk/models/operations"));
var shared = __importStar(require("../sdk/models/shared"));
var jsonpath_1 = __importDefault(require("jsonpath"));
/**
 * Manage all the webhook you receive inside your app
 */
var Webhook = /** @class */ (function () {
    function Webhook(sdkConfig) {
        this.sdkConfiguration = sdkConfig;
    }
    /**
     * Cancel a webhook
     *
     * @remarks
     * Terminates the designated webhook, identified by its {id}, preventing any further processing.
     */
    Webhook.prototype.cancel = function (req, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var baseURL, operationUrl, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(req instanceof utils.SpeakeasyBase)) {
                            req = new operations.CancelWebhookRequest(req);
                        }
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = utils.generateURL(baseURL, "/v3/webhook/{id}/cancel", req);
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new shared.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        headers["Accept"] = "application/json";
                        headers["user-agent"] = this.sdkConfiguration.userAgent;
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "post", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.CancelWebhookResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.webhook = utils.objectToClass(JSON.parse(decodedRes), shared.Webhook);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400 ||
                                (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404 ||
                                (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412 ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Retrieve the list of Webhooks
     *
     * @remarks
     * Fetches the list of all webhooks dispatched to your server. You can apply filters and pagination for more tailored results.
     */
    Webhook.prototype.getAll = function (req, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var baseURL, operationUrl, client, globalSecurity, properties, headers, queryParams, httpRes, responseContentType, res, decodedRes;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(req instanceof utils.SpeakeasyBase)) {
                            req = new operations.GetAllWebhookRequest(req);
                        }
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = baseURL.replace(/\/$/, "") + "/v3/webhook";
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new shared.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        queryParams = utils.serializeQueryParams(req);
                        headers["Accept"] = "application/json";
                        headers["user-agent"] = this.sdkConfiguration.userAgent;
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl + queryParams, method: "get", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.GetAllWebhookResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.webhookPaginated = utils.objectToClass(JSON.parse(decodedRes), operations.GetAllWebhookWebhookPaginated);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400 ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                        }
                        res.next = function () { return __awaiter(_this, void 0, void 0, function () {
                            var page, newPage, numPages, results, limit;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        page = req.page || 0;
                                        newPage = page + 1;
                                        numPages = jsonpath_1.default.value(JSON.parse(decodedRes), "$.meta.totalPages");
                                        if (numPages == undefined || numPages <= page) {
                                            return [2 /*return*/, null];
                                        }
                                        if (!JSON.parse(decodedRes)) {
                                            return [2 /*return*/, null];
                                        }
                                        results = jsonpath_1.default.value(JSON.parse(decodedRes), "$.items");
                                        if (!results.length) {
                                            return [2 /*return*/, null];
                                        }
                                        limit = req.limit || 0;
                                        if (results.length < limit) {
                                            return [2 /*return*/, null];
                                        }
                                        return [4 /*yield*/, this.getAll(__assign(__assign({}, req), { page: newPage }), config)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); };
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Retrieve a Specific Webhook
     *
     * @remarks
     * Fetches the details of a specific webhook dispatched by Starton, identified uniquely by its {id}.
     */
    Webhook.prototype.getOne = function (req, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var baseURL, operationUrl, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(req instanceof utils.SpeakeasyBase)) {
                            req = new operations.GetOneWebhookRequest(req);
                        }
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = utils.generateURL(baseURL, "/v3/webhook/{id}", req);
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new shared.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        headers["Accept"] = "application/json";
                        headers["user-agent"] = this.sdkConfiguration.userAgent;
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "get", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.GetOneWebhookResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.webhook = utils.objectToClass(JSON.parse(decodedRes), shared.Webhook);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400 ||
                                (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404 ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Retrieve Webhook Signing Secret
     *
     * @remarks
     * Fetches the signing secret associated with your project. Use this secret to securely verify the integrity and authenticity of payloads received from Starton's API in your server-side webhook implementations.
     */
    Webhook.prototype.getSigningSecret = function (config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var baseURL, operationUrl, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = baseURL.replace(/\/$/, "") + "/v3/webhook/signing-secret";
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new shared.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        headers["Accept"] = "application/json";
                        headers["user-agent"] = this.sdkConfiguration.userAgent;
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "get", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.GetOneWebhookSigningSecretResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.webhookSigningSecret = utils.objectToClass(JSON.parse(decodedRes), shared.WebhookSigningSecret);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400 ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Regenerate Webhook signing secret
     *
     * @remarks
     * Generates a new signing secret for your project, invalidating the old one. All subsequent payloads from Starton's API will be signed using this new secret, enhancing the security of your webhook integrations.
     */
    Webhook.prototype.regenerateSigningSecret = function (config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var baseURL, operationUrl, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = baseURL.replace(/\/$/, "") + "/v3/webhook/signing-secret/regenerate";
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new shared.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        headers["Accept"] = "application/json";
                        headers["user-agent"] = this.sdkConfiguration.userAgent;
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "post", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.CreateWebhookSigningSecretResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.webhookSigningSecret = utils.objectToClass(JSON.parse(decodedRes), shared.WebhookSigningSecret);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400 ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Resend a Webhook
     *
     * @remarks
     * Initiates the resend process for a particular webhook to your server, facilitating testing scenarios or handling missed events.
     */
    Webhook.prototype.resend = function (req, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var baseURL, operationUrl, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(req instanceof utils.SpeakeasyBase)) {
                            req = new operations.ResendWebhookRequest(req);
                        }
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = utils.generateURL(baseURL, "/v3/webhook/{id}/resend", req);
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new shared.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        headers["Accept"] = "application/json";
                        headers["user-agent"] = this.sdkConfiguration.userAgent;
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "post", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.ResendWebhookResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.webhook = utils.objectToClass(JSON.parse(decodedRes), shared.Webhook);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400 ||
                                (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404 ||
                                (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412 ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return Webhook;
}());
exports.Webhook = Webhook;
