import * as utils from "../internal/utils";
import * as shared from "../sdk/models/shared";
import { Data } from "./data";
import { Ipfs } from "./ipfs";
import { Kms } from "./kms";
import { Monitor } from "./monitor";
import { Network } from "./network";
import { Project } from "./project";
import { SmartContract } from "./smartcontract";
import { SmartContractManagement } from "./smartcontractmanagement";
import { TransactionManager } from "./transactionmanager";
import { Wallet } from "./wallet";
import { Webhook } from "./webhook";
import { AxiosInstance } from "axios";
/**
 * Contains the list of servers available to the SDK
 */
export declare const ServerList: readonly ["https://api.starton.com"];
/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    startonApiKey?: string;
    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;
    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;
    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};
export declare class SDKConfiguration {
    defaultClient: AxiosInstance;
    security?: shared.Security | (() => Promise<shared.Security>);
    serverURL: string;
    serverDefaults: any;
    language: string;
    openapiDocVersion: string;
    sdkVersion: string;
    genVersion: string;
    userAgent: string;
    retryConfig?: utils.RetryConfig;
    constructor(init?: Partial<SDKConfiguration>);
}
/**
 * Starton API: Documentation: # Introduction
 *
 * @remarks
 *
 * Starton is the all-in-one WEB3 api to integrate blockchain feature inside your project.
 *
 * # Authentication
 *
 * To access API endpoints, you must provide a valid API key. You can create new
 * API keys in your [account settings](https://app.starton.com/projects/default/developer). Be
 * careful when handling your keys as they give access to all your project,
 * you should treat them like passwords and they should never be committed to
 * source control.
 *
 * To authenticate with API, you can supply the API key as a header
 * (`x-api-key: YOUR_API_KEY`).
 *
 * Some API endpoints allow unauthenticated requests for public resources and
 * they can be called without an API key.
 *
 * # Errors
 *
 * All successful API requests will be returned with a 200 or 201 status code.
 *  If there’s an error while making the
 * request, the appropriate status code is returned with the error message:
 *
 * ```
 * {
 * 	"statusCode": 401,
 * 	"errorCode": "NOT_AUTHENTICATED",
 * 	"message": "Not authenticated",
 * 	"timestamp": "2023-10-14T00:12:22.470Z",
 * 	"path": "/v3/project",
 * 	"context": {},
 * }
 * ```
 *
 * # Pagination
 *
 * Most top-level API resources have support for `getAll` API methods. For instance,
 * you can list smart contracts, webhooks, templates etc. These list methods share
 * common parameters, taking both `limit` and `page`.
 *
 * Responses will be in the root `meta` and `items` key. For example:
 *
 * ```
 * {
 * 	data: […],
 * 	meta: {
 * 		itemCount: 10,
 * 		totalItems: 50,
 * 		itemsPerPage: 10,
 * 		totalPages: 5
 * 		currentPage: 1
 * 	}
 * }
 * ```
 *
 *
 * # Rate limits
 *
 * Depending on your plan, you will benefit from a specific rate limit.
 *
 * | Plan      | Rate limit               |
 * |-----------|--------------------------|
 * | Free      | 50 requests/min          |
 * | Developer | 100 requests/min         |
 * | Business  | up to 10000 requests/min |
 *
 */
export declare class Starton {
    /**
     * Starton Blockchain data endpoints.
     */
    data: Data;
    /**
     * Starton wallet service
     */
    wallet: Wallet;
    /**
     * IPFS allows users to host and receive content in a manner similar to BitTorrent. As opposed to a centrally located server, IPFS is built around a decentralized system creating a resilient system of file storage and sharing. Starton IPFS storage service acts as a liaison between the IPFS protocol and you, with a user-friendly interface that lets you pin or upload files as you would any other storage service. You get all the benefits of hosting your content on the protocol while still having the easy process of uploading it.
     */
    ipfs: Ipfs;
    /**
     * Starton kms service
     */
    kms: Kms;
    /**
     * Starton Transaction Manager. Handle nonce issue, gas management, rebroadcasting etc.
     */
    transactionManager: TransactionManager;
    /**
     * Get all available network, or add your custom one (enterprise only)
     */
    network: Network;
    project: Project;
    /**
     * The Smart contract management is an abstraction on top of our **Transaction Manager** and it allow you to build and automate your smart contract transaction easily, without struggling with the ABI and params encoding. With it you can:
     *
     * @remarks
     * - **Deploying smart contract:** Deploy **audited** contract from our library or your own smart contract
     * - **Import existing contract:** Import existing contract to view them on your dashboard and interact with them.
     * - **Interact:** Read state and interact with the smart contract previously deployed or imported
     */
    smartContractManagement: SmartContractManagement;
    smartContract: SmartContract;
    /**
     * The list of conditions that trigger a watcher event
     */
    monitor: Monitor;
    /**
     * Manage all the webhook you receive inside your app
     */
    webhook: Webhook;
    private sdkConfiguration;
    constructor(props?: SDKProps);
}
