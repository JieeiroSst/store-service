"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = exports.TransactionStatus = exports.TransactionState = exports.TransactionSpeed = exports.TransactionMetadata = void 0;
var utils_1 = require("../../../internal/utils");
var transactionlog_1 = require("./transactionlog");
var class_transformer_1 = require("class-transformer");
var TransactionMetadata = /** @class */ (function (_super) {
    __extends(TransactionMetadata, _super);
    function TransactionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TransactionMetadata;
}(utils_1.SpeakeasyBase));
exports.TransactionMetadata = TransactionMetadata;
var TransactionSpeed;
(function (TransactionSpeed) {
    TransactionSpeed["Low"] = "low";
    TransactionSpeed["Average"] = "average";
    TransactionSpeed["Fast"] = "fast";
    TransactionSpeed["Fastest"] = "fastest";
    TransactionSpeed["Custom"] = "custom";
})(TransactionSpeed = exports.TransactionSpeed || (exports.TransactionSpeed = {}));
var TransactionState;
(function (TransactionState) {
    TransactionState["Success"] = "SUCCESS";
    TransactionState["Pending"] = "PENDING";
    TransactionState["ManualActionRequired"] = "MANUAL_ACTION_REQUIRED";
    TransactionState["Error"] = "ERROR";
})(TransactionState = exports.TransactionState || (exports.TransactionState = {}));
var TransactionStatus;
(function (TransactionStatus) {
    TransactionStatus["Unsigned"] = "UNSIGNED";
    TransactionStatus["ErrorTx"] = "ERROR_TX";
    TransactionStatus["ErrorPublish"] = "ERROR_PUBLISH";
    TransactionStatus["Published"] = "PUBLISHED";
    TransactionStatus["ReceivedByStarton"] = "RECEIVED_BY_STARTON";
    TransactionStatus["CreatedByStarton"] = "CREATED_BY_STARTON";
    TransactionStatus["CouldNotEstimateGasPrice"] = "COULD_NOT_ESTIMATE_GAS_PRICE";
    TransactionStatus["CouldNotIncreaseGasPrice"] = "COULD_NOT_INCREASE_GAS_PRICE";
    TransactionStatus["GasPriceEstimated"] = "GAS_PRICE_ESTIMATED";
    TransactionStatus["InvalidGasPrice"] = "INVALID_GAS_PRICE";
    TransactionStatus["ReplacementGasPriceUnderpriced"] = "REPLACEMENT_GAS_PRICE_UNDERPRICED";
    TransactionStatus["CouldNotEstimateGasLimit"] = "COULD_NOT_ESTIMATE_GAS_LIMIT";
    TransactionStatus["GasLimitEstimated"] = "GAS_LIMIT_ESTIMATED";
    TransactionStatus["ExecutionWillFail"] = "EXECUTION_WILL_FAIL";
    TransactionStatus["InvalidArgument"] = "INVALID_ARGUMENT";
    TransactionStatus["InsufficientFunds"] = "INSUFFICIENT_FUNDS";
    TransactionStatus["InsufficientFundsAfterBroadcast"] = "INSUFFICIENT_FUNDS_AFTER_BROADCAST";
    TransactionStatus["CouldNotAssignNonce"] = "COULD_NOT_ASSIGN_NONCE";
    TransactionStatus["CouldNotUnstuckNonce"] = "COULD_NOT_UNSTUCK_NONCE";
    TransactionStatus["NonceAssigned"] = "NONCE_ASSIGNED";
    TransactionStatus["NonceExpired"] = "NONCE_EXPIRED";
    TransactionStatus["CouldNotSign"] = "COULD_NOT_SIGN";
    TransactionStatus["Signed"] = "SIGNED";
    TransactionStatus["SentToMempool"] = "SENT_TO_MEMPOOL";
    TransactionStatus["CouldNotBroadcast"] = "COULD_NOT_BROADCAST";
    TransactionStatus["AlreadyKnown"] = "ALREADY_KNOWN";
    TransactionStatus["Mined"] = "MINED";
    TransactionStatus["Confirmed"] = "CONFIRMED";
    TransactionStatus["Replaced"] = "REPLACED";
    TransactionStatus["Failed"] = "FAILED";
    TransactionStatus["MonitoringInProgress"] = "MONITORING_IN_PROGRESS";
    TransactionStatus["StuckByPreviousTransaction"] = "STUCK_BY_PREVIOUS_TRANSACTION";
    TransactionStatus["MaxGasPriceReach"] = "MAX_GAS_PRICE_REACH";
    TransactionStatus["GasPriceIncreased"] = "GAS_PRICE_INCREASED";
    TransactionStatus["NewTransactionHash"] = "NEW_TRANSACTION_HASH";
    TransactionStatus["Unknown"] = "UNKNOWN";
    TransactionStatus["MonitoringInterrupted"] = "MONITORING_INTERRUPTED";
})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    function Transaction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "automaticNonce" }),
        __metadata("design:type", Boolean)
    ], Transaction.prototype, "automaticNonce", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "blockHash" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "blockHash", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "blockNumber" }),
        __metadata("design:type", Number)
    ], Transaction.prototype, "blockNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "chainId" }),
        __metadata("design:type", Number)
    ], Transaction.prototype, "chainId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createdAt" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Transaction.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "data" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "data", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "from" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "from", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "gasLimit" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "gasLimit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "gasPrice" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "gasPrice", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "isDeployTransaction" }),
        __metadata("design:type", Boolean)
    ], Transaction.prototype, "isDeployTransaction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: transactionlog_1.TransactionLog }),
        (0, class_transformer_1.Expose)({ name: "logs" }),
        (0, class_transformer_1.Type)(function () { return transactionlog_1.TransactionLog; }),
        __metadata("design:type", Array)
    ], Transaction.prototype, "logs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxFeePerGas" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "maxFeePerGas", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxPriorityFeePerGas" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "maxPriorityFeePerGas", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metadata" }),
        (0, class_transformer_1.Type)(function () { return TransactionMetadata; }),
        __metadata("design:type", TransactionMetadata)
    ], Transaction.prototype, "metadata", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minedDate" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Transaction.prototype, "minedDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nonce" }),
        __metadata("design:type", Number)
    ], Transaction.prototype, "nonce", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "parentTransaction" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "parentTransaction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "projectId" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "projectId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "publishedDate" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Transaction.prototype, "publishedDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "signedTransaction" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "signedTransaction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "signerWallet" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "signerWallet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "speed" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "speed", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "to" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "to", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transactionHash" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "transactionHash", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", Number)
    ], Transaction.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updatedAt" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Transaction.prototype, "updatedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "value", void 0);
    return Transaction;
}(utils_1.SpeakeasyBase));
exports.Transaction = Transaction;
