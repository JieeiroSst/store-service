"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionLog = exports.TransactionLogType = exports.Context = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var Context = /** @class */ (function (_super) {
    __extends(Context, _super);
    function Context() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Context;
}(utils_1.SpeakeasyBase));
exports.Context = Context;
var TransactionLogType;
(function (TransactionLogType) {
    TransactionLogType["Unsigned"] = "UNSIGNED";
    TransactionLogType["ErrorTx"] = "ERROR_TX";
    TransactionLogType["ErrorPublish"] = "ERROR_PUBLISH";
    TransactionLogType["Published"] = "PUBLISHED";
    TransactionLogType["ReceivedByStarton"] = "RECEIVED_BY_STARTON";
    TransactionLogType["CreatedByStarton"] = "CREATED_BY_STARTON";
    TransactionLogType["CouldNotEstimateGasPrice"] = "COULD_NOT_ESTIMATE_GAS_PRICE";
    TransactionLogType["CouldNotIncreaseGasPrice"] = "COULD_NOT_INCREASE_GAS_PRICE";
    TransactionLogType["GasPriceEstimated"] = "GAS_PRICE_ESTIMATED";
    TransactionLogType["InvalidGasPrice"] = "INVALID_GAS_PRICE";
    TransactionLogType["ReplacementGasPriceUnderpriced"] = "REPLACEMENT_GAS_PRICE_UNDERPRICED";
    TransactionLogType["CouldNotEstimateGasLimit"] = "COULD_NOT_ESTIMATE_GAS_LIMIT";
    TransactionLogType["GasLimitEstimated"] = "GAS_LIMIT_ESTIMATED";
    TransactionLogType["ExecutionWillFail"] = "EXECUTION_WILL_FAIL";
    TransactionLogType["InvalidArgument"] = "INVALID_ARGUMENT";
    TransactionLogType["InsufficientFunds"] = "INSUFFICIENT_FUNDS";
    TransactionLogType["InsufficientFundsAfterBroadcast"] = "INSUFFICIENT_FUNDS_AFTER_BROADCAST";
    TransactionLogType["CouldNotAssignNonce"] = "COULD_NOT_ASSIGN_NONCE";
    TransactionLogType["CouldNotUnstuckNonce"] = "COULD_NOT_UNSTUCK_NONCE";
    TransactionLogType["NonceAssigned"] = "NONCE_ASSIGNED";
    TransactionLogType["NonceExpired"] = "NONCE_EXPIRED";
    TransactionLogType["CouldNotSign"] = "COULD_NOT_SIGN";
    TransactionLogType["Signed"] = "SIGNED";
    TransactionLogType["SentToMempool"] = "SENT_TO_MEMPOOL";
    TransactionLogType["CouldNotBroadcast"] = "COULD_NOT_BROADCAST";
    TransactionLogType["AlreadyKnown"] = "ALREADY_KNOWN";
    TransactionLogType["Mined"] = "MINED";
    TransactionLogType["Confirmed"] = "CONFIRMED";
    TransactionLogType["Replaced"] = "REPLACED";
    TransactionLogType["Failed"] = "FAILED";
    TransactionLogType["MonitoringInProgress"] = "MONITORING_IN_PROGRESS";
    TransactionLogType["StuckByPreviousTransaction"] = "STUCK_BY_PREVIOUS_TRANSACTION";
    TransactionLogType["MaxGasPriceReach"] = "MAX_GAS_PRICE_REACH";
    TransactionLogType["GasPriceIncreased"] = "GAS_PRICE_INCREASED";
    TransactionLogType["NewTransactionHash"] = "NEW_TRANSACTION_HASH";
    TransactionLogType["Unknown"] = "UNKNOWN";
    TransactionLogType["MonitoringInterrupted"] = "MONITORING_INTERRUPTED";
})(TransactionLogType = exports.TransactionLogType || (exports.TransactionLogType = {}));
var TransactionLog = /** @class */ (function (_super) {
    __extends(TransactionLog, _super);
    function TransactionLog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "context" }),
        (0, class_transformer_1.Type)(function () { return Context; }),
        __metadata("design:type", Context)
    ], TransactionLog.prototype, "context", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createdAt" }),
        __metadata("design:type", String)
    ], TransactionLog.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "message" }),
        __metadata("design:type", String)
    ], TransactionLog.prototype, "message", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], TransactionLog.prototype, "type", void 0);
    return TransactionLog;
}(utils_1.SpeakeasyBase));
exports.TransactionLog = TransactionLog;
