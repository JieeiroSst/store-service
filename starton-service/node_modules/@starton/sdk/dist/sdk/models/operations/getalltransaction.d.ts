import { SpeakeasyBase } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";
export declare class GetAllTransactionRequest extends SpeakeasyBase {
    /**
     * The wallet used to sign the transactions (filter).
     */
    from?: string;
    /**
     * Retrieves transactions executed after a specified date.
     */
    fromDate?: Date;
    /**
     * Number of entities returned on each page. By default this number is set to 100.
     */
    limit?: number;
    /**
     * Specifies the network on which the transactions are deployed (filter). See <a href='https://docs.starton.com/docs/overview#supported-networks'>supported networks</a>.
     */
    network?: string;
    /**
     * Number of returned page. By default the returned page is the first.
     */
    page?: number;
    /**
     * The address receiver of transactions, which can be a smart contract (filter).
     */
    to?: string;
    /**
     * The hash of a specific transaction (filter).
     */
    transactionHash?: string;
}
export declare class GetAllTransactionTransactionPaginated extends SpeakeasyBase {
    items: shared.Transaction[];
    meta: shared.PaginationData;
}
export declare class GetAllTransactionResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: AxiosResponse;
    transactionPaginated?: GetAllTransactionTransactionPaginated;
    next: () => Promise<GetAllTransactionResponse | null>;
}
