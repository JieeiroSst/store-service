import { SpeakeasyBase } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";
export declare enum Category {
    Nft = "NFT",
    Fungible = "FUNGIBLE",
    Other = "OTHER",
    Deprecated = "DEPRECATED",
    Sale = "SALE",
    Tool = "TOOL"
}
export declare class GetAllSmartContractTemplateRequest extends SpeakeasyBase {
    blockchain?: string;
    category?: Category;
    includeCompilationDetails?: boolean;
    includeForm?: boolean;
    isActivated?: boolean;
    isAudited?: boolean;
    /**
     * Number of entities returned on each page. By default this number is set to 100.
     */
    limit?: number;
    name?: string;
    /**
     * Number of returned page. By default the returned page is the first.
     */
    page?: number;
}
export declare class GetAllSmartContractTemplateSmartContractTemplatePaginated extends SpeakeasyBase {
    items: shared.SmartContractTemplate[];
    meta: shared.PaginationData;
}
export declare class GetAllSmartContractTemplateResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    smartContractTemplatePaginated?: GetAllSmartContractTemplateSmartContractTemplatePaginated;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: AxiosResponse;
    next: () => Promise<GetAllSmartContractTemplateResponse | null>;
}
