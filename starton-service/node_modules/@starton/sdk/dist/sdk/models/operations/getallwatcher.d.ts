import { SpeakeasyBase } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";
export declare enum TypeT {
    MinedTransaction = "MINED_TRANSACTION",
    AddressActivity = "ADDRESS_ACTIVITY",
    AddressReceivedNativeCurrency = "ADDRESS_RECEIVED_NATIVE_CURRENCY",
    AddressSentNativeCurrency = "ADDRESS_SENT_NATIVE_CURRENCY",
    EventTransfer = "EVENT_TRANSFER",
    Erc721EventTransfer = "ERC721_EVENT_TRANSFER",
    Erc1155EventTransferSingle = "ERC1155_EVENT_TRANSFER_SINGLE",
    Erc1155EventTransferBatch = "ERC1155_EVENT_TRANSFER_BATCH",
    EventMint = "EVENT_MINT",
    EventApproval = "EVENT_APPROVAL",
    EventCustom = "EVENT_CUSTOM"
}
export declare class GetAllWatcherRequest extends SpeakeasyBase {
    address?: string;
    confirmationsBlocks?: number;
    /**
     * Number of entities returned on each page. By default this number is set to 100.
     */
    limit?: number;
    name?: string;
    network?: string;
    /**
     * Number of returned page. By default the returned page is the first.
     */
    page?: number;
    paused?: boolean;
    type?: TypeT;
    webhookUrl?: string;
}
export declare class GetAllWatcherWatcherPaginated extends SpeakeasyBase {
    items: shared.Watcher[];
    meta: shared.PaginationData;
}
export declare class GetAllWatcherResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: AxiosResponse;
    watcherPaginated?: GetAllWatcherWatcherPaginated;
    next: () => Promise<GetAllWatcherResponse | null>;
}
