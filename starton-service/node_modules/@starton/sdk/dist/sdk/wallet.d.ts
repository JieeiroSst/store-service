import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosRequestConfig } from "axios";
/**
 * Starton wallet service
 */
export declare class Wallet {
    private sdkConfiguration;
    constructor(sdkConfig: SDKConfiguration);
    /**
     * Create a new wallet
     *
     * @remarks
     * Create a new wallet for the project.
     */
    create(req: shared.CreateWalletDto, config?: AxiosRequestConfig): Promise<operations.CreateWalletResponse>;
    /**
     * Delete a wallet
     *
     * @remarks
     * Removes a wallet from the Key Management System.
     */
    delete(req: operations.DeleteWalletRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWalletResponse>;
    /**
     * Retrieve the list of Wallets
     *
     * @remarks
     * Fetches the list of wallets of the project
     */
    getAll(req: operations.GetAllWalletRequest, config?: AxiosRequestConfig): Promise<operations.GetAllWalletResponse>;
    /**
     * Fetch Wallet Details
     *
     * @remarks
     * Retrieves information about a specific wallet.
     */
    getOne(req: operations.GetOneWalletRequest, config?: AxiosRequestConfig): Promise<operations.GetOneWalletResponse>;
    /**
     * Import Wallet from Provider Key
     *
     * @remarks
     * Imports a wallet using a Key Management System.
     */
    import(req: shared.ImportProviderKeyDto, config?: AxiosRequestConfig): Promise<operations.ImportProviderKeyWalletResponse>;
    /**
     * Request tokens from faucet
     *
     * @remarks
     * Request tokens from the faucet, which can be used for testing and development purposes on testnet networks. Each user is limited to one request per day.
     */
    requestFaucet(req: operations.ClaimFaucetRequest, config?: AxiosRequestConfig): Promise<operations.ClaimFaucetResponse>;
    /**
     * Synchronize Nonces for a wallet
     *
     * @remarks
     * Updates the stored nonce values for a wallet, synchronizing them with the current blockchain state.
     */
    resyncNonce(req: operations.ResyncNoncesWalletRequest, config?: AxiosRequestConfig): Promise<operations.ResyncNoncesWalletResponse>;
    /**
     * Sign a message
     *
     * @remarks
     * Generates a cryptographic signature for a given message using a specified wallet.
     */
    sign(req: operations.SignMessageWalletRequest, config?: AxiosRequestConfig): Promise<operations.SignMessageWalletResponse>;
    /**
     * Update Wallet Information
     *
     * @remarks
     * Modifies details of an existing wallet using its address.
     */
    update(req: operations.UpdateWalletRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWalletResponse>;
}
